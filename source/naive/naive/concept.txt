
Не надо делить флэш на верхний и нижний.
Выбор между call/callf и ret/retf в соответствии определенной константой farptr (1-far/0-Near)

По поводу проходов:
1 проход:
1. Массивы данных создаются кроме адреса (если адрес указан принудительно он прописывается). Нужного размера. 
	В массивах данных нельзя использовать метки для инициализации.
2. Данные создаются без адреса (если адрес указан принудительно он прописывается). Нужного размера. 
	Если в данных присутствует метка как элемент данных - она суется в нераспознанное
3. Метки на код создаются без адреса (если адрес указан принудительно он прописывается).
4. Однозначно декодируемый код создается без адреса. Нужного размера. Параметры - метки указываются по имени.
4. Код зависящий от типа и размещения меток создается без адреса и без собственно кода, 
	в поле нераспознаное - сама нераспознанная команда. Поле длины указывается максимально возможным для конкретной операции.

2 проход
1. Проходим по командам вызова и перехода. Расчитываем расстояние до метки и выбираем правильный генерируемый код. 
	Корректируем поле длины.
2. Проходим по командам зависящим от типа меток и генерим их правильный вариант.
3. Предварительно раскладываем все в памяти заполняя поля адреса

3 проход
1. Прописываем адреса меток вместо их имен
2. Окончательно раскладываем в памяти (только область flash и eeprom)




КОНЦЕПЦИЯ ИЗМЕНИЛАСЬ!

Просто транслируем в штатный ассемблер процессора. В результате снимаем проблему с метками, инициализацией и многопроходность.

В запись псевдо присваиваний добавить для однообразия #
clr  a=#0
scf  c=#1
rcf  c=#0 и т.п

На старте прежде чем загружать конфиг - проверить его наличие.

ВООБще все файлы проверять перед их открытием!

Ошибка: перехватываются и не исполняются a=#1 (setop перехватывает и не генерит присваивания)



Ошибка: генерится пустой *.s19 (паузы между вызовами?) !!!

Проверять ключи перед обращением по ним - выдавать предупреждение

Переместить препроцессор ДО разбивания на точки с запятой
Сделать функциональный дефайн
Повторять работу препроцессора для отработки вложенных макросов
Сделать возможность использовать локальных меток в функциональном дефайне
Сделать undef по функциональным define


Файл ошибок ассемблера st загружать и выводить наивом после чего файл убивать