//
// test for full command set
//
include targets/stm8s003._


// interrupt vectors

interrupt reset@0x8000: (f32) {0x82000000+start}
interrupt trap:         (f32) {0x82000000+dumb}
interrupt tli:          (f32) {0x82000000+dumb}
interrupt awu:          (f32) {0x82000000+dumb}
interrupt clk:          (f32) {0x82000000+dumb}
interrupt exti0:        (f32) {0x82000000+dumb}
interrupt exti1:        (f32) {0x82000000+dumb}
interrupt exti2:        (f32) {0x82000000+dumb}
interrupt exti3:        (f32) {0x82000000+dumb}
interrupt exti4:        (f32) {0x82000000+dumb}
interrupt canrx:        (f32) {0x82000000+dumb}
interrupt cantx:        (f32) {0x82000000+dumb}
interrupt spi:          (f32) {0x82000000+dumb}
interrupt tim1u:        (f32) {0x82000000+tmr1handler}
interrupt tim1c:        (f32) {0x82000000+dumb}
interrupt tim2u:        (f32) {0x82000000+dumb}
interrupt tim2c:        (f32) {0x82000000+dumb}
interrupt tim3u:        (f32) {0x82000000+dumb}
interrupt tim3c:        (f32) {0x82000000+dumb}
interrupt uart1tx:      (f32) {0x82000000+dumb}
interrupt uart1rx:      (f32) {0x82000000+dumb}
interrupt i2c:          (f32) {0x82000000+dumb}
interrupt uart3tx:      (f32) {0x82000000+dumb}
interrupt uart3rx:      (f32) {0x82000000+dumb}
interrupt adc1:         (f32) {0x82000000+dumb}
interrupt tim4u:        (f32) {0x82000000+dumb}
interrupt flash:        (f32) {0x82000000+dumb}

dumb: iret

start:                                        
        x = #ramend; sp = x                       // initialise stack pointer (it is assembler!!!)

        counter = #0

	i=#0;i=#1;c=#0;c=#1;v=#0
	a=#0;a=#1
	a=data8near;a=[x];a=[y];a=ptr16[x];a=ptr16[y]
	a=[ptr16];a={ptr32};a=[ptr16[x]];a={ptr32[x]};a={ptr32[y]}
	data8near=a;[x]=a;[y]=a;ptr16[x]=a;ptr16[y]=a
	[ptr16]=a;{ptr32}=a;[ptr16[x]]=a;{ptr32[x]}=a
	data8near=#99; data8=data8flash;
	x=#0;x=#1;y=#0;y=#1
	x=y;y=x;x=sp;y=sp;sp=x;sp=y
	x=data16near;x=[x];x=ptr16[x];x=[ptr16.w];x=[ptr16[x]]
	y=data16near;y=[y];y=ptr16[y]
	data16near=x;[y]=x;ptr16[y]=x;[ptr16.w]=x
	data16near=y;[x]=y;ptr16[x]=y;[ptr16[x]]=y
	a=xl;a=xh;a=yl;a=yh;xl=a;yl=a;yh=a;xh=a
	data8near#5=#0;data8near#6=#1

        a+=#1;a+=data8near;a+=[x];a+=[y];a+=ptr16[x];a+=ptr16[y];a+=[ptr16];a+=[ptr16[x]]
        a-=#1;a-=data8near;a-=[x];a-=[y];a-=ptr16[x];a-=ptr16[y];a-=[ptr16];a-=[ptr16[x]]        
	a+=c+#1;a+=c+data8near;a+=c+[x];a+=c+[y];a+=c+ptr16[x];a+=c+ptr16[y];a+=c+[ptr16];a+=c+[ptr16[x]]
        a-=c+#1;a-=c+data8near;a-=c+[x];a-=c+[y];a-=c+ptr16[x];a-=c+ptr16[y];a-=c+[ptr16];a-=c+[ptr16[x]]
	x/%y;x/=a;y/=a;x*=a;y*=a;
        a&=#1;a&=data8near;a&=[x];a&=[y];a&=ptr16[x];a&=ptr16[y];a&=[ptr16];a&=[ptr16[x]]
        a|=#1;a|=data8near;a|=[x];a|=[y];a|=ptr16[x];a|=ptr16[y];a|=[ptr16];a|=[ptr16[x]];
        a&?#1;a&?data8near;a&?[x];a&?[y];a&?ptr16[x];a&?ptr16[y];a&?[ptr16];a&?[ptr16[x]]
        a?#1;a?data8near;a?[x];a?[y];a?ptr16[x];a?ptr16[y];a?[ptr16];a?[ptr16[x]];
        ?a;?data8near;?[x];?[y];?ptr16[x];?ptr16[y];?[ptr16];?[ptr16[x]]
	
	!c;!data8near#5;!a;!x;!y;!data8near;![x];![y];!ptr16[x];!ptr16[y];![ptr16];![ptr16[x]]

	swap a; swap x; swap y;swap data8near;swap [x];swap [y];swap ptr16[x];swap ptr16[y];swap [ptr16];swap [ptr16[x]]

	push a;push #1;push cc;push data8;pop a;pop cc;pop data8near

        ++a;++x;y++;++data8;[x]++;++[y];ptr16[x]++;ptr16[y]++;[ptr16]++;++[ptr16[x]]
        --a;--x;y--;--data8near;[x]--;--[y];ptr16[x]--;ptr16[y]--;[ptr16]--;--[ptr16[x]]
	-a;-x;-y;-data8near;-[x];-[y];-ptr16[x];-ptr16[y];-[ptr16];-[ptr16[x]]

	c<<c a;c<<c x;c<<c y;c<<c data8near;c<<c [x];c<<c [y];c<<c ptr16[x];c<<c ptr16[y];c<<c [ptr16];c<<c [ptr16[x]];
	c>>c a;c>>c x;c>>c y;c>>c data8near;c>>c [x];c>>c [y];c>>c ptr16[x];c>>c ptr16[y];c>>c [ptr16];c>>c [ptr16[x]]
	c<<0 a;c<<0 x;c<<0 y;c<<0 data8near;c<<0 [x];c<<0 [y];c<<0 ptr16[x];c<<0 ptr16[y];c<<0 [ptr16];c<<0 [ptr16[x]]	
	0>>c a;0>>c x;0>>c y;0>>c data8near;0>>c [x];0>>c [y];0>>c ptr16[x];0>>c ptr16[y];0>>c [ptr16];0>>c [ptr16[x]]	
	s>>c a;s>>c x;s>>c y;s>>c data8near;s>>c [x];s>>c [y];s>>c ptr16[x];s>>c ptr16[y];s>>c [ptr16];s>>c [ptr16[x]]
	a>>a x; a>>a y; a<<a x; a<<a y;
	if z==0 label
        if z==1 label
	if c==0 label
        if c==1 label
        if h==0 label
        if h==1 label
	if i==0 label
        if i==1 label
	if v==0 label
        if v==1 label
	if int==0 label
        if int==1 label
	if false label
        if true label
       	if <0 label
        if >=0 label
	if <>0 label
        if !=0 label
	if >=s label
        if >s label
	if <=s label
        if <s label
	if >=u label
        if >u label
	if <=u label
        if <u label
	if data8#3==0 label
	if data8#4==1 label
	go near label
	go far label2
	go label
	call near label
	call far label2 
	call label
label:	ret
label2:	retf
        nop
//	dbg
	trap
	wait
	waiti
	halt
 
counter:	(r16)

ptr16:		(m16)
ptr32:		(m32)
ptr8:		(r8)


data8near:	(r8)
data16near:	(r16)
data32near:	(r32)
array8near:	(r8)[5]
data8:		(m8)
data16:		(m16)
data32:		(m32)
array8:		(m8)[10]

data8eeprom:		(e8) '8'
data16eeprom:		(e16)  16
data32eeprom:		(e32)  0x3232
array8eeprom:		(e8)[7] 'e','e','p','r','o','m',0
data8flash:		(f8) '8'
data16flash:		(f16)  16
data32flash:		(f32)  0x3232
array8flash:		(f8)[6] "flash",0

tmr1handler:	
	x = counter
	x++
	counter = x
	iret

 


